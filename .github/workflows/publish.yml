name: Publish to PyPI

on:
  push:
    tags:
      - 'v[0-9]*.[0-9]*.[0-9]*'  # Triggers on any tag starting with v (e.g., v0.1.0, v1.2.3)

jobs:
  publish:
    runs-on: ubuntu-latest
    environment: pypi  # Uses the 'pypi' environment with protection rules
    permissions:
      id-token: write  # Required for trusted publishing
      contents: write  # Required to create GitHub release

    steps:
    - uses: actions/checkout@v4
      with:
        fetch-depth: 0  # Fetch all history for changelog

    - name: Verify tag format
      run: |
        if [[ ! "${{ github.ref_name }}" =~ ^v[0-9]+\.[0-9]+\.[0-9]+$ ]]; then
          echo "❌ Tag must be in format v0.0.0"
          exit 1
        fi
        echo "✅ Tag format valid: ${{ github.ref_name }}"

    - name: Set up Python
      uses: actions/setup-python@v5
      with:
        python-version: '3.12'

    - name: Install build tools
      run: pip install build twine

    - name: Build package
      run: python -m build

    - name: Check package
      run: twine check dist/*

    - name: Extract changelog for this version
      id: changelog
      run: |
        VERSION="${{ github.ref_name }}"
        VERSION_NUM="${VERSION#v}"  # Remove 'v' prefix

        # Extract changelog section for this version from README
        CHANGELOG=$(python3 << 'EOF'
        import re

        with open('README.md', 'r') as f:
            content = f.read()

        # Find the changelog section
        version = "${{ github.ref_name }}".replace('v', '')

        # Try to extract from ## Changelog section
        pattern = f"### {version}.*?\n(.*?)(?=\n### |\Z)"
        match = re.search(pattern, content, re.DOTALL)

        if match:
            notes = match.group(1).strip()
            # Clean up the notes
            notes = '\n'.join(line for line in notes.split('\n') if line.strip())
            print(notes)
        else:
            print(f"Release {version}")
        EOF
        )

        # Save to output
        echo "notes<<EOF" >> $GITHUB_OUTPUT
        echo "$CHANGELOG" >> $GITHUB_OUTPUT
        echo "EOF" >> $GITHUB_OUTPUT

    - name: Create GitHub Release
      uses: softprops/action-gh-release@v1
      with:
        body: ${{ steps.changelog.outputs.notes }}
        draft: false
        prerelease: false
        generate_release_notes: true  # Auto-generate from commits

    - name: Publish to PyPI
      uses: pypa/gh-action-pypi-publish@release/v1
